{"version":3,"sources":["Pokémon.jsx","PokémonList.jsx","index.js"],"names":["getPokemonSprite","name","gen5Sprite","shinny","Math","floor","random","formattedName","toLowerCase","split","join","includes","openInSmogon","window","open","percentCalc","number","base","calc","substring","Pokémon","abilities","checksAndCounters","items","moves","rawCount","spreads","teammates","usage","useState","imageFallback","setImageFallBack","page","setPage","readableUsage","className","type","onClick","src","title","alt","onError","disabled","id","map","ability","abilityUsage","item","itemUsage","nature","hp","attack","defense","spAtk","spDef","speed","spreadUsage","move","moveUsage","teammate","checkOrCounter","data","pokemons","info","rawData","Object","keys","forEach","pokemonName","pokemon","Teammates","push","sort","usageA","matchup","switchOrKo","deviation","discriminator","discriminatorA","Items","Spreads","spreadString","parseInt","Moves","Abilities","PokémonList","cutoff","metagame","tier","toUpperCase","gen","slice","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4eb7f48e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './Pokémon.css';\n\nconst getPokemonSprite = (name, gen5Sprite = false) => {\n  const shinny = Math.floor(Math.random() * 512) === 0 ? '-shiny' : '';\n  let formattedName = name\n    .toLowerCase()\n    .split(\"'\")\n    .join('')\n    .split('.')\n    .join('')\n    .split(':')\n    .join('')\n    .split(' ')\n    .join('');\n  if (\n    formattedName.includes('kommo') ||\n    formattedName.includes('hakamo') ||\n    formattedName.includes('jangmo')\n  ) {\n    formattedName = formattedName.split('-').join('');\n  }\n  if (gen5Sprite) {\n    formattedName = `https://play.pokemonshowdown.com/sprites/gen5${shinny}/${formattedName}.png`;\n  } else {\n    formattedName = `https://play.pokemonshowdown.com/sprites/ani${shinny}/${formattedName}.gif`;\n  }\n  return formattedName;\n};\n\nconst openInSmogon = (name) => {\n  window.open(\n    `https://www.smogon.com/dex/ss/pokemon/${name.toLowerCase()}/`,\n    '_blank',\n  );\n};\n\nconst percentCalc = (number, base) => {\n  const calc = `${(number * 100) / base}`;\n  return `${calc.substring(0, 4)}%`;\n};\n\nfunction Pokémon({\n  abilities,\n  checksAndCounters,\n  items,\n  moves,\n  name,\n  number,\n  rawCount,\n  spreads,\n  teammates,\n  usage,\n}) {\n  const [imageFallback, setImageFallBack] = useState(false);\n  const [page, setPage] = useState(0);\n\n  const readableUsage = `${usage * 100}`.substring(0, 4);\n  return (\n    <li className=\"pokemon\">\n      <h2 className=\"pokemon-title\">{name}</h2>\n      <strong className=\"number\">\n        {usage > 0.03406367107 ? number : '--'}\n      </strong>\n      <strong className=\"usage\">{`${readableUsage}%`}</strong>\n      <button\n        className=\"image-button\"\n        type=\"button\"\n        onClick={() => openInSmogon(name)}\n      >\n        <img\n          className=\"pokemon-sprite\"\n          src={getPokemonSprite(name, imageFallback)}\n          title={name}\n          alt={`${name} Sprite`}\n          onError={() => {\n            setImageFallBack(true);\n          }}\n        />\n      </button>\n      <div className=\"tab-wrapper\">\n        <button\n          className=\"info-tab\"\n          type=\"button\"\n          onClick={() => setPage(0)}\n          disabled={page === 0}\n        >\n          Pokémon\n        </button>\n        <button\n          className=\"info-tab\"\n          type=\"button\"\n          onClick={() => setPage(1)}\n          disabled={page === 1}\n        >\n          Teammates\n        </button>\n        <button\n          className=\"info-tab\"\n          type=\"button\"\n          onClick={() => setPage(2)}\n          disabled={page === 2}\n        >\n          Checks and Counters\n        </button>\n      </div>\n      {page === 0 && (\n        <>\n          <div className=\"stat-container\" id=\"abilities\">\n            <h3 className=\"stat-title\">Abilities:</h3>\n            <ul className=\"stat-list\">\n              {abilities.map(({ ability, usage: abilityUsage }) => (\n                <li className=\"stat-list-element\">\n                  <span className=\"stat\">{`${ability}:`}</span>\n                  <span className=\"stat\">\n                    {percentCalc(abilityUsage, rawCount)}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"stat-container\">\n            <h3 className=\"stat-title\">Most used items:</h3>\n            <ul className=\"stat-list\">\n              {items.map(({ item, usage: itemUsage }) => (\n                <li className=\"stat-list-element\">\n                  <span className=\"stat\">{`${item}:`}</span>\n                  <span className=\"stat\">\n                    {percentCalc(itemUsage, rawCount)}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"stat-container\" id=\"spread\">\n            <h3 className=\"stat-title\">Spreads:</h3>\n            <ul className=\"stat-list\">\n              {spreads.map(\n                ({\n                  nature,\n                  hp,\n                  attack,\n                  defense,\n                  spAtk,\n                  spDef,\n                  speed,\n                  usage: spreadUsage,\n                }) => (\n                  <li className=\"stat-list-element\">\n                    <span className=\"stat\">{`${nature}:`}</span>\n                    <span className=\"stat\">\n                      {`${hp}/${attack}/${defense}/${spAtk}/${spDef}/${speed}`}\n                    </span>\n                    <span className=\"stat\">\n                      {percentCalc(spreadUsage, rawCount)}\n                    </span>\n                  </li>\n                ),\n              )}\n            </ul>\n          </div>\n          <div className=\"stat-container\">\n            <h3 className=\"stat-title\">Most used moves:</h3>\n            <ul className=\"stat-list\">\n              {moves.map(({ move, usage: moveUsage }) => (\n                <li className=\"stat-list-element\">\n                  <span className=\"stat\">{`${move}:`}</span>\n                  <span className=\"stat\">\n                    {percentCalc(moveUsage, rawCount)}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </>\n      )}\n      {page === 1 && (\n        <div className=\"stat-container\">\n          <ul className=\"stat-grid\">\n            {teammates.map(({ teammate }) => (\n              <li className=\"stat-grid-cel\" title={teammate}>\n                <button\n                  className=\"image-button\"\n                  type=\"button\"\n                  onClick={() => openInSmogon(teammate)}\n                >\n                  <img\n                    className=\"pokemon-icon\"\n                    src={getPokemonSprite(teammate, true)}\n                    alt={`${teammate} Icon`}\n                  />\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      {page === 2 && (\n        <div className=\"stat-container\">\n          <ul className=\"stat-grid\">\n            {checksAndCounters.map(({ checkOrCounter }) => (\n              <li className=\"stat-grid-cel\" title={checkOrCounter}>\n                <button\n                  className=\"image-button\"\n                  type=\"button\"\n                  onClick={() => openInSmogon(checkOrCounter)}\n                >\n                  <img\n                    className=\"pokemon-icon\"\n                    src={getPokemonSprite(checkOrCounter, true)}\n                    alt={`${checkOrCounter} Icon`}\n                  />\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </li>\n  );\n}\n\nPokémon.propTypes = {\n  abilities: PropTypes.arrayOf(\n    PropTypes.shape({\n      ability: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  checksAndCounters: PropTypes.arrayOf(\n    PropTypes.shape({\n      matchup: PropTypes.number.isRequired,\n      switchOrKo: PropTypes.number.isRequired,\n      deviation: PropTypes.number.isRequired,\n      discriminator: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      item: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  moves: PropTypes.arrayOf(\n    PropTypes.shape({\n      move: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  rawCount: PropTypes.number.isRequired,\n  spreads: PropTypes.arrayOf(\n    PropTypes.shape({\n      attack: PropTypes.number.isRequired,\n      defense: PropTypes.number.isRequired,\n      hp: PropTypes.number.isRequired,\n      nature: PropTypes.string.isRequired,\n      spAtk: PropTypes.number.isRequired,\n      spDef: PropTypes.number.isRequired,\n      speed: PropTypes.number.isRequired,\n      spreadString: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  teammates: PropTypes.arrayOf(\n    PropTypes.shape({\n      teammate: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  usage: PropTypes.number.isRequired,\n};\n\nexport default Pokémon;\n","import React from 'react';\nimport Pokémon from './Pokémon';\nimport rawData from './data/gen8ou-1695.json';\nimport './PokémonList.css';\n\nconst data = { pokemons: [] };\ndata.info = rawData.info;\n\nconst pokemonNames = Object.keys(rawData.data);\npokemonNames.forEach((pokemonName) => {\n  const pokemon = {\n    name: pokemonName,\n    usage: rawData.data[pokemonName].usage,\n    rawCount: rawData.data[pokemonName]['Raw count'],\n  };\n  pokemon.teammates = [];\n  const pokemonTeamMatesNames = Object.keys(\n    rawData.data[pokemonName].Teammates,\n  );\n  pokemonTeamMatesNames.forEach((teammate) => {\n    pokemon.teammates.push({\n      teammate,\n      usage: rawData.data[pokemonName].Teammates[teammate],\n    });\n  });\n  pokemon.teammates.sort(\n    ({ usage: usageA }, { usage: usageB }) => usageB - usageA,\n  );\n  pokemon.checksAndCounters = [];\n  const pokemonChecksAndCountersNames = Object.keys(\n    rawData.data[pokemonName]['Checks and Counters'],\n  );\n  pokemonChecksAndCountersNames.forEach((checkOrCounter) => {\n    pokemon.checksAndCounters.push({\n      checkOrCounter,\n      matchup:\n        rawData.data[pokemonName]['Checks and Counters'][checkOrCounter][0],\n      switchOrKo:\n        rawData.data[pokemonName]['Checks and Counters'][checkOrCounter][1],\n      deviation:\n        rawData.data[pokemonName]['Checks and Counters'][checkOrCounter][2],\n      discriminator:\n        rawData.data[pokemonName]['Checks and Counters'][checkOrCounter][1] *\n          100 -\n        rawData.data[pokemonName]['Checks and Counters'][checkOrCounter][2] *\n          100,\n    });\n  });\n  pokemon.checksAndCounters.sort(\n    ({ discriminator: discriminatorA }, { discriminator: discriminatorB }) =>\n      discriminatorB - discriminatorA,\n  );\n  pokemon.items = [];\n  const itemsNames = Object.keys(rawData.data[pokemonName].Items);\n  itemsNames.forEach((item) => {\n    pokemon.items.push({\n      item,\n      usage: rawData.data[pokemonName].Items[item],\n    });\n  });\n  pokemon.items.sort(({ usage: usageA }, { usage: usageB }) => usageB - usageA);\n  pokemon.spreads = [];\n  const spreadStrings = Object.keys(rawData.data[pokemonName].Spreads);\n  spreadStrings.forEach((spreadString) => {\n    const [nature, evSpread] = spreadString.split(':');\n    const [hp, attack, defense, spAtk, spDef, speed] = evSpread.split('/');\n    pokemon.spreads.push({\n      spreadString,\n      nature,\n      hp: parseInt(hp, 10),\n      attack: parseInt(attack, 10),\n      defense: parseInt(defense, 10),\n      spAtk: parseInt(spAtk, 10),\n      spDef: parseInt(spDef, 10),\n      speed: parseInt(speed, 10),\n      usage: rawData.data[pokemonName].Spreads[spreadString],\n    });\n  });\n  pokemon.spreads.sort(\n    ({ usage: usageA }, { usage: usageB }) => usageB - usageA,\n  );\n  pokemon.moves = [];\n  const movesNames = Object.keys(rawData.data[pokemonName].Moves);\n  movesNames.forEach((move) => {\n    pokemon.moves.push({\n      move,\n      usage: rawData.data[pokemonName].Moves[move],\n    });\n  });\n  pokemon.moves.sort(({ usage: usageA }, { usage: usageB }) => usageB - usageA);\n  pokemon.abilities = [];\n  const abilitiesName = Object.keys(rawData.data[pokemonName].Abilities);\n  abilitiesName.forEach((ability) => {\n    pokemon.abilities.push({\n      ability,\n      usage: rawData.data[pokemonName].Abilities[ability],\n    });\n  });\n  pokemon.abilities.sort(\n    ({ usage: usageA }, { usage: usageB }) => usageB - usageA,\n  );\n  data.pokemons.push(pokemon);\n});\n\ndata.pokemons.sort(({ usage: usageA }, { usage: usageB }) => usageB - usageA);\n\nfunction PokémonList() {\n  const { cutoff, metagame } = data.info;\n  const tier = metagame.substring(4).toUpperCase();\n  const gen = metagame.substring(3, 4);\n\n  return (\n    <>\n      <div className=\"title-container\">\n        <h1>{`${tier} Gen ${gen}`}</h1>\n        <h1>April 2020</h1>\n        <h1>{`GXE ${cutoff}`}</h1>\n      </div>\n      <ul className=\"pokemons\">\n        {data.pokemons\n          .slice(0, 36)\n          .map(\n            (\n              {\n                abilities,\n                checksAndCounters,\n                items,\n                moves,\n                name,\n                rawCount,\n                spreads,\n                teammates,\n                usage,\n              },\n              i,\n            ) => (\n              <Pokémon\n                number={i + 1}\n                abilities={abilities}\n                checksAndCounters={checksAndCounters.slice(0, 18)}\n                items={items.slice(0, 5)}\n                moves={moves.slice(0, 6)}\n                name={name}\n                rawCount={rawCount}\n                spreads={spreads.slice(0, 6)}\n                teammates={teammates.slice(0, 18)}\n                usage={usage}\n              />\n            ),\n          )}\n      </ul>\n    </>\n  );\n}\n\n/*\nconst dataExample = {\n  info: {\n    metagame: string,\n    cutoff: number,\n    'cutoff deviation': 0,\n    'team type': ID || null,\n    'number of battles': number,\n  },\n  data: {\n    pokemon: {\n      'Raw count': number,\n      usage: number,\n      'Viability Ceiling': [number, number, number, number], \n      // num GXE, max GXE, 1% GXE, 20% GXE\n      Abilities: { [ability: string]: number },\n      Items: { [item: string]: number },\n      Spreads: { [spread: string]: number },\n      Happiness: { [happiness: string]: number },\n      Moves: { [move: string]: number },\n      Teammates: { [pokemon: string]: number },\n      'Checks and Counters': { [pokemon: string]: [n, p, d] },\n      // n = sum(POKE1_KOED...DOUBLE_SWITCH)\n      // p = POKE1_KOED + POKE1_SWITCHED_OUT / n\n      // d = sqrt((p * (1 - p)) / n)\n    },\n  },\n};\n*/\n\nexport default PokémonList;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PokémonList from './PokémonList';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PokémonList />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
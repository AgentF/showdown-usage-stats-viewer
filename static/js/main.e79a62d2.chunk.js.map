{"version":3,"sources":["components/PokémonList/Pokémon.jsx","components/PokémonList/PokémonList.jsx","components/PokémonList/index.jsx","index.js"],"names":["getPokemonSprite","name","gen5Sprite","shinny","Math","floor","random","formattedName","toLowerCase","split","join","includes","openInSmogon","window","open","percentCalc","number","base","calc","substring","Pokémon","abilities","checksAndCounters","items","moves","position","rawCount","spreads","teammates","usage","useState","imageFallback","setImageFallBack","page","setPage","readableUsage","className","type","onClick","src","title","alt","onError","disabled","id","map","ability","abilityUsage","item","itemUsage","nature","hp","attack","defense","spAtk","spDef","speed","spreadUsage","spread","push","spreadString","move","moveUsage","teammate","checkOrCounter","PokémonList","metagame","data","info","tier","toUpperCase","gen","pokemons","key","slice","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e79a62d2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './Pokémon.css';\n\nconst getPokemonSprite = (name, gen5Sprite = false) => {\n  const shinny = Math.floor(Math.random() * 512) === 0 ? '-shiny' : '';\n  let formattedName = name\n    .toLowerCase()\n    .split(\"'\")\n    .join('')\n    .split('.')\n    .join('')\n    .split(':')\n    .join('')\n    .split(' ')\n    .join('');\n  if (\n    formattedName.includes('kommo') ||\n    formattedName.includes('hakamo') ||\n    formattedName.includes('jangmo')\n  ) {\n    formattedName = formattedName.split('-').join('');\n  }\n  if (gen5Sprite) {\n    formattedName = `https://play.pokemonshowdown.com/sprites/gen5${shinny}/${formattedName}.png`;\n  } else {\n    formattedName = `https://play.pokemonshowdown.com/sprites/ani${shinny}/${formattedName}.gif`;\n  }\n  return formattedName;\n};\n\nconst openInSmogon = (name) => {\n  window.open(\n    `https://www.smogon.com/dex/ss/pokemon/${name.toLowerCase()}/`,\n    '_blank',\n  );\n};\n\nconst percentCalc = (number, base) => {\n  const calc = `${(number * 100) / base}`;\n  return `${calc.substring(0, 4)}%`;\n};\n\nconst spreadString = ({ hp, attack, defense, spAtk, spDef, speed }) => {\n  const spread = [];\n  if (hp > 0) {\n    spread.push(`${hp} HP`);\n  }\n  if (attack > 0) {\n    spread.push(`${attack} Atk`);\n  }\n  if (defense > 0) {\n    spread.push(`${defense} Def`);\n  }\n  if (spAtk > 0) {\n    spread.push(`${spAtk} SpA`);\n  }\n  if (spDef > 0) {\n    spread.push(`${spDef} SpD`);\n  }\n  if (speed > 0) {\n    spread.push(`${speed} Spe`);\n  }\n  return spread.join(' / ');\n};\n\nfunction Pokémon({\n  abilities,\n  checksAndCounters,\n  items,\n  moves,\n  name,\n  position,\n  rawCount,\n  spreads,\n  teammates,\n  usage,\n}) {\n  const [imageFallback, setImageFallBack] = useState(false);\n  const [page, setPage] = useState(0);\n\n  const readableUsage = `${usage * 100}`.substring(0, 4);\n  return (\n    <li className=\"pokemon\">\n      <h2 className=\"pokemon-title\">{name}</h2>\n      <strong className=\"number\">{position}</strong>\n      <strong className=\"usage\">{`${readableUsage}%`}</strong>\n      <button\n        className=\"sprite-button\"\n        type=\"button\"\n        onClick={() => openInSmogon(name)}\n      >\n        <img\n          className=\"pokemon-sprite\"\n          src={getPokemonSprite(name, imageFallback)}\n          title={name}\n          alt={`${name} Sprite`}\n          onError={() => {\n            setImageFallBack(true);\n          }}\n        />\n      </button>\n      <div className=\"tab-wrapper\">\n        <button\n          className=\"info-tab\"\n          type=\"button\"\n          onClick={() => setPage(0)}\n          disabled={page === 0}\n        >\n          Info\n        </button>\n        <button\n          className=\"info-tab\"\n          type=\"button\"\n          onClick={() => setPage(1)}\n          disabled={page === 1}\n        >\n          Teammates\n        </button>\n        <button\n          className=\"info-tab\"\n          type=\"button\"\n          onClick={() => setPage(2)}\n          disabled={page === 2}\n        >\n          Checks / Counters\n        </button>\n      </div>\n      {page === 0 && (\n        <>\n          <div className=\"stat-container\" id=\"abilities\">\n            <h3 className=\"stat-title\">Abilities</h3>\n            <ul className=\"stat-list\">\n              {abilities.map(({ ability, usage: abilityUsage }) => (\n                <li className=\"stat-list-element\">\n                  <span className=\"stat\">{`${ability}`}</span>\n                  <span className=\"stat\">\n                    {percentCalc(abilityUsage, rawCount)}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"stat-container\">\n            <h3 className=\"stat-title\">Most used items</h3>\n            <ul className=\"stat-list\">\n              {items.map(({ item, usage: itemUsage }) => (\n                <li className=\"stat-list-element\">\n                  <span className=\"stat\">{`${item}`}</span>\n                  <span className=\"stat\">\n                    {percentCalc(itemUsage, rawCount)}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"stat-container\" id=\"spread\">\n            <h3 className=\"stat-title\">Spreads</h3>\n            <ul className=\"stat-list\">\n              {spreads.map(\n                ({\n                  nature,\n                  hp,\n                  attack,\n                  defense,\n                  spAtk,\n                  spDef,\n                  speed,\n                  usage: spreadUsage,\n                }) => (\n                  <>\n                    <li className=\"stat-list-element\">\n                      <span className=\"stat\">\n                        {`EVs: ${spreadString({\n                          hp,\n                          attack,\n                          defense,\n                          spAtk,\n                          spDef,\n                          speed,\n                        })}`}\n                      </span>\n                    </li>\n                    <li className=\"stat-list-element\">\n                      <span className=\"stat\">{`${nature} Nature`}</span>\n                      <span className=\"stat\">\n                        {percentCalc(spreadUsage, rawCount)}\n                      </span>\n                    </li>\n                  </>\n                ),\n              )}\n            </ul>\n          </div>\n          <div className=\"stat-container\">\n            <h3 className=\"stat-title\">Most used moves</h3>\n            <ul className=\"stat-list\">\n              {moves.map(({ move, usage: moveUsage }) => (\n                <li className=\"stat-list-element\">\n                  <span className=\"stat\">{`${move}`}</span>\n                  <span className=\"stat\">\n                    {percentCalc(moveUsage, rawCount)}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </>\n      )}\n      {page === 1 && (\n        <div className=\"stat-container\">\n          <ul className=\"stat-grid\">\n            {teammates.map(({ teammate }) => (\n              <li className=\"stat-grid-cel\" title={teammate}>\n                <button\n                  className=\"icon-button\"\n                  type=\"button\"\n                  onClick={() => openInSmogon(teammate)}\n                >\n                  <img\n                    className=\"pokemon-icon\"\n                    src={getPokemonSprite(teammate, true)}\n                    alt={`${teammate} Icon`}\n                  />\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      {page === 2 && (\n        <div className=\"stat-container\">\n          <ul className=\"stat-grid\">\n            {checksAndCounters.map(({ checkOrCounter }) => (\n              <li className=\"stat-grid-cel\" title={checkOrCounter}>\n                <button\n                  className=\"icon-button\"\n                  type=\"button\"\n                  onClick={() => openInSmogon(checkOrCounter)}\n                >\n                  <img\n                    className=\"pokemon-icon\"\n                    src={getPokemonSprite(checkOrCounter, true)}\n                    alt={`${checkOrCounter} Icon`}\n                  />\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </li>\n  );\n}\n\nPokémon.propTypes = {\n  abilities: PropTypes.arrayOf(\n    PropTypes.shape({\n      ability: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  checksAndCounters: PropTypes.arrayOf(\n    PropTypes.shape({\n      matchup: PropTypes.number.isRequired,\n      switchOrKo: PropTypes.number.isRequired,\n      deviation: PropTypes.number.isRequired,\n      discriminator: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      item: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  moves: PropTypes.arrayOf(\n    PropTypes.shape({\n      move: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  name: PropTypes.string.isRequired,\n  position: PropTypes.number.isRequired,\n  rawCount: PropTypes.number.isRequired,\n  spreads: PropTypes.arrayOf(\n    PropTypes.shape({\n      attack: PropTypes.number.isRequired,\n      defense: PropTypes.number.isRequired,\n      hp: PropTypes.number.isRequired,\n      nature: PropTypes.string.isRequired,\n      spAtk: PropTypes.number.isRequired,\n      spDef: PropTypes.number.isRequired,\n      speed: PropTypes.number.isRequired,\n      spreadString: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  teammates: PropTypes.arrayOf(\n    PropTypes.shape({\n      teammate: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  usage: PropTypes.number.isRequired,\n};\n\nexport default Pokémon;\n","import React from 'react';\nimport Pokémon from './Pokémon';\nimport data from '../../data/testData.json';\nimport './PokémonList.css';\n\nfunction PokémonList() {\n  const { metagame } = data.info;\n  const tier = metagame.substring(4).toUpperCase();\n  const gen = metagame.substring(3, 4);\n\n  return (\n    <>\n      <div className=\"title-container\">\n        <h2>{`${tier} Gen ${gen}`}</h2>\n        <h2>May 2020</h2>\n      </div>\n      <ul className=\"pokemons\">\n        {data.pokemons.map(\n          ({\n            position,\n            abilities,\n            checksAndCounters,\n            items,\n            moves,\n            name,\n            rawCount,\n            spreads,\n            teammates,\n            usage,\n          }) => (\n            <Pokémon\n              key={position}\n              position={position}\n              abilities={abilities}\n              checksAndCounters={checksAndCounters.slice(0, 18)}\n              items={items.slice(0, 4)}\n              moves={moves.slice(0, 5)}\n              name={name}\n              rawCount={rawCount}\n              spreads={spreads.slice(0, 3)}\n              teammates={teammates.slice(0, 18)}\n              usage={usage}\n            />\n          ),\n        )}\n      </ul>\n    </>\n  );\n}\n/*\nconst dataExample = {\n  info: {\n    metagame: string,\n    cutoff: number,\n    'cutoff deviation': 0,\n    'team type': ID || null,\n    'number of battles': number,\n  },\n  data: {\n    pokemon: {\n      'Raw count': 'number',\n      usage: 'number',\n      'Viability Ceiling': '[number, number, number, number]', \n      // num GXE, max GXE, 1% GXE, 20% GXE\n      Abilities: '{ [ability: string]: number }',\n      Items: '{ [item: string]: number }',\n      Spreads: '{ [spread: string]: number }',\n      Happiness: '{ [happiness: string]: number }',\n      Moves: '{ [move: string]: number }',\n      Teammates: '{ [pokemon: string]: number }',\n      'Checks and Counters': '{ [pokemon: string]: [n, p, d] }',\n      // n = sum(POKE1_KOED...DOUBLE_SWITCH)\n      // p = POKE1_KOED + POKE1_SWITCHED_OUT / n\n      // d = sqrt((p * (1 - p)) / n)\n    },\n  },\n};\n*/\nexport default PokémonList;\n","import React from 'react';\nimport PokémonList from './PokémonList';\n\nfunction index() {\n  return <PokémonList />;\n}\n\nexport default index;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PokémonList from './components/PokémonList';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PokémonList />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
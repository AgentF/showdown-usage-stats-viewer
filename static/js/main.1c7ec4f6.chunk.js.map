{"version":3,"sources":["utilities/helpers.js","components/PokémonList/Pokémon.jsx","components/PokémonList/PokémonOverview.jsx","components/PokémonList/PokémonList.jsx","components/PokémonList/index.jsx","index.js"],"names":["getSmogonSprite","name","icon","shinny","Math","floor","random","formattedName","toLowerCase","split","join","includes","getSmogonLink","getPercent","number","base","calc","substring","Pokémon","abilities","checksAndCounters","items","moves","position","rawCount","spreads","teammates","usage","useState","page","setPage","readableUsage","className","type","onClick","src","title","alt","disabled","id","map","ability","abilityUsage","item","itemUsage","nature","hp","attack","defense","spAtk","spDef","speed","spreadUsage","spread","push","getSpreadString","move","moveUsage","teammate","checkOrCounter","PokémonOverview","onClickHandler","sprite","PokémonList","selectedPokémon","setSelectedPokémon","metagame","data","info","tier","toUpperCase","gen","pokémon","pokemons","top10","slice","top100","key","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c7ec4f6.chunk.js","sourcesContent":["function getSmogonSprite(name, icon = true) {\n  const shinny = Math.floor(Math.random() * 512) === 0 ? '-shiny' : '';\n  let formattedName = name\n    .toLowerCase()\n    .split(\"'\")\n    .join('')\n    .split('.')\n    .join('')\n    .split(':')\n    .join('')\n    .split(' ')\n    .join('');\n  if (\n    formattedName.includes('porygon') ||\n    formattedName.includes('kommo') ||\n    formattedName.includes('hakamo') ||\n    formattedName.includes('jangmo')\n  ) {\n    formattedName = formattedName.split('-').join('');\n  }\n  if (formattedName === 'urshifu-rapid-strike') {\n    formattedName = 'urshifu';\n  }\n  if (icon) {\n    formattedName = `https://play.pokemonshowdown.com/sprites/ani${shinny}/${formattedName}.gif`;\n  } else {\n    formattedName = `https://play.pokemonshowdown.com/sprites/gen5${shinny}/${formattedName}.png`;\n  }\n  return formattedName;\n}\n\nfunction getSmogonLink(name) {\n  return `https://www.smogon.com/dex/ss/pokemon/${name.toLowerCase()}/`;\n}\n\nfunction getPercent(number, base) {\n  const calc = `${(number * 100) / base}`;\n  return `${calc.substring(0, 4)}%`;\n}\n\nfunction getSpreadString({ hp, attack, defense, spAtk, spDef, speed }) {\n  const spread = [];\n  if (hp > 0) {\n    spread.push(`${hp} HP`);\n  }\n  if (attack > 0) {\n    spread.push(`${attack} Atk`);\n  }\n  if (defense > 0) {\n    spread.push(`${defense} Def`);\n  }\n  if (spAtk > 0) {\n    spread.push(`${spAtk} SpA`);\n  }\n  if (spDef > 0) {\n    spread.push(`${spDef} SpD`);\n  }\n  if (speed > 0) {\n    spread.push(`${speed} Spe`);\n  }\n  return spread.join(' / ');\n}\n\nexport { getSmogonSprite, getSmogonLink, getPercent, getSpreadString };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  getSmogonSprite,\n  getSmogonLink,\n  getPercent,\n  getSpreadString,\n} from '../../utilities/helpers';\nimport './Pokémon.css';\n\nfunction Pokémon({\n  abilities,\n  checksAndCounters,\n  items,\n  moves,\n  name,\n  position,\n  rawCount,\n  spreads,\n  teammates,\n  usage,\n}) {\n  const [page, setPage] = useState(0);\n\n  const readableUsage = `${usage * 100}`.substring(0, 4);\n  return (\n    <div className=\"pokemon-detail\">\n      <h2 className=\"pokemon-title\">{name}</h2>\n      <strong className=\"number\">{position}</strong>\n      <strong className=\"usage\">{`${readableUsage}%`}</strong>\n      <button\n        className=\"sprite-button\"\n        type=\"button\"\n        onClick={() => getSmogonLink(name)}\n      >\n        <img\n          className=\"pokemon-sprite\"\n          src={getSmogonSprite(name)}\n          title={name}\n          alt={`${name} Sprite`}\n        />\n      </button>\n      <div className=\"tab-wrapper\">\n        <button\n          className=\"info-tab\"\n          type=\"button\"\n          onClick={() => setPage(0)}\n          disabled={page === 0}\n        >\n          <span>Info</span>\n        </button>\n        <button\n          className=\"info-tab\"\n          type=\"button\"\n          onClick={() => setPage(1)}\n          disabled={page === 1}\n        >\n          <span>Teammates</span>\n        </button>\n        <button\n          className=\"info-tab\"\n          type=\"button\"\n          onClick={() => setPage(2)}\n          disabled={page === 2}\n        >\n          <span>Checks / Counters</span>\n        </button>\n      </div>\n      {page === 0 && (\n        <>\n          <div className=\"stat-container\" id=\"abilities\">\n            <h3 className=\"stat-title\">Abilities</h3>\n            <ul className=\"stat-list\">\n              {abilities.map(({ ability, usage: abilityUsage }) => (\n                <li className=\"stat-list-element\">\n                  <span className=\"stat\">{`${ability}`}</span>\n                  <span className=\"stat\">\n                    {getPercent(abilityUsage, rawCount)}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"stat-container\">\n            <h3 className=\"stat-title\">Most used items</h3>\n            <ul className=\"stat-list\">\n              {items.map(({ item, usage: itemUsage }) => (\n                <li className=\"stat-list-element\">\n                  <span className=\"stat\">{`${item}`}</span>\n                  <span className=\"stat\">\n                    {getPercent(itemUsage, rawCount)}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"stat-container\" id=\"spread\">\n            <h3 className=\"stat-title\">Spreads</h3>\n            <ul className=\"stat-list\">\n              {spreads.map(\n                ({\n                  nature,\n                  hp,\n                  attack,\n                  defense,\n                  spAtk,\n                  spDef,\n                  speed,\n                  usage: spreadUsage,\n                }) => (\n                  <>\n                    <li className=\"stat-list-element\">\n                      <span className=\"stat\">\n                        {`EVs: ${getSpreadString({\n                          hp,\n                          attack,\n                          defense,\n                          spAtk,\n                          spDef,\n                          speed,\n                        })}`}\n                      </span>\n                    </li>\n                    <li className=\"stat-list-element\">\n                      <span className=\"stat\">{`${nature} Nature`}</span>\n                      <span className=\"stat\">\n                        {getPercent(spreadUsage, rawCount)}\n                      </span>\n                    </li>\n                  </>\n                ),\n              )}\n            </ul>\n          </div>\n          <div className=\"stat-container\">\n            <h3 className=\"stat-title\">Most used moves</h3>\n            <ul className=\"stat-list\">\n              {moves.map(({ move, usage: moveUsage }) => (\n                <li className=\"stat-list-element\">\n                  <span className=\"stat\">{`${move}`}</span>\n                  <span className=\"stat\">\n                    {getPercent(moveUsage, rawCount)}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </>\n      )}\n      {page === 1 && (\n        <div className=\"stat-container\">\n          <ul className=\"stat-grid\">\n            {teammates.map(({ teammate }) => (\n              <li className=\"stat-grid-cel\" title={teammate}>\n                <button\n                  className=\"icon-button\"\n                  type=\"button\"\n                  onClick={() => getSmogonLink(teammate)}\n                >\n                  <img\n                    className=\"pokemon-icon\"\n                    src={getSmogonSprite(teammate, false)}\n                    alt={`${teammate} Icon`}\n                  />\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      {page === 2 && (\n        <div className=\"stat-container\">\n          <ul className=\"stat-grid\">\n            {checksAndCounters.map(({ checkOrCounter }) => (\n              <li className=\"stat-grid-cel\" title={checkOrCounter}>\n                <button\n                  className=\"icon-button\"\n                  type=\"button\"\n                  onClick={() => getSmogonLink(checkOrCounter)}\n                >\n                  <img\n                    className=\"pokemon-icon\"\n                    src={getSmogonSprite(checkOrCounter, false)}\n                    alt={`${checkOrCounter} Icon`}\n                  />\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nPokémon.propTypes = {\n  abilities: PropTypes.arrayOf(\n    PropTypes.shape({\n      ability: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  checksAndCounters: PropTypes.arrayOf(\n    PropTypes.shape({\n      matchup: PropTypes.number.isRequired,\n      switchOrKo: PropTypes.number.isRequired,\n      deviation: PropTypes.number.isRequired,\n      discriminator: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      item: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  moves: PropTypes.arrayOf(\n    PropTypes.shape({\n      move: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  name: PropTypes.string.isRequired,\n  position: PropTypes.number.isRequired,\n  rawCount: PropTypes.number.isRequired,\n  spreads: PropTypes.arrayOf(\n    PropTypes.shape({\n      attack: PropTypes.number.isRequired,\n      defense: PropTypes.number.isRequired,\n      hp: PropTypes.number.isRequired,\n      nature: PropTypes.string.isRequired,\n      spAtk: PropTypes.number.isRequired,\n      spDef: PropTypes.number.isRequired,\n      speed: PropTypes.number.isRequired,\n      spreadString: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  teammates: PropTypes.arrayOf(\n    PropTypes.shape({\n      teammate: PropTypes.string.isRequired,\n      usage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  usage: PropTypes.number.isRequired,\n};\n\nexport default Pokémon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getSmogonSprite } from '../../utilities/helpers';\nimport './PokémonOverview.css';\n\nfunction PokémonOverview({ position, name, usage, onClickHandler, sprite }) {\n  const readableUsage = `${usage * 100}`.substring(0, 4);\n  return (\n    <li className=\"pokemon-overview-wrapper\">\n      <button\n        className=\"pokemon-overview\"\n        onClick={onClickHandler}\n        type=\"button\"\n      >\n        <span className=\"pokemon-position-overview\">{`#${position}`}</span>\n        <img\n          className=\"pokemon-sprite-overview\"\n          src={getSmogonSprite(name, sprite)}\n          title={name}\n          alt={`${name} Sprite`}\n        />\n        <h2 className=\"pokemon-name-overview\">{name}</h2>\n        <span className=\"pokemon-usage-overview\">{`${readableUsage}%`}</span>\n      </button>\n    </li>\n  );\n}\n\nPokémonOverview.propTypes = {\n  name: PropTypes.string.isRequired,\n  position: PropTypes.number.isRequired,\n  usage: PropTypes.number.isRequired,\n  onClickHandler: PropTypes.func.isRequired,\n  sprite: PropTypes.bool.isRequired,\n};\n\nexport default PokémonOverview;\n","import React, { useState } from 'react';\nimport Pokémon from './Pokémon';\nimport PokémonOverview from './PokémonOverview';\nimport data from '../../data/testData.json';\nimport './PokémonList.css';\n\nfunction PokémonList() {\n  const [selectedPokémon, setSelectedPokémon] = useState(1);\n  const { metagame } = data.info;\n  const tier = metagame.substring(4).toUpperCase();\n  const gen = metagame.substring(3, 4);\n  const pokémon = data.pokemons[selectedPokémon - 1];\n  const top10 = data.pokemons.slice(0, 10);\n  const top100 = data.pokemons.slice(10, 100);\n\n  return (\n    <div className=\"tier-list\">\n      <div className=\"title-container\">\n        <h2>{`${tier} Gen ${gen}`}</h2>\n      </div>\n      <Pokémon\n        position={pokémon.position}\n        abilities={pokémon.abilities}\n        checksAndCounters={pokémon.checksAndCounters.slice(0, 48)}\n        items={pokémon.items.slice(0, 4)}\n        moves={pokémon.moves.slice(0, 5)}\n        name={pokémon.name}\n        rawCount={pokémon.rawCount}\n        spreads={pokémon.spreads.slice(0, 3)}\n        teammates={pokémon.teammates.slice(0, 48)}\n        usage={pokémon.usage}\n      />\n      <ul className=\"top-10-pokemon\">\n        {top10.map(\n          ({\n            position,\n            abilities,\n            checksAndCounters,\n            items,\n            moves,\n            name,\n            rawCount,\n            spreads,\n            teammates,\n            usage,\n          }) => (\n            <PokémonOverview\n              key={position}\n              position={position}\n              abilities={abilities}\n              checksAndCounters={checksAndCounters.slice(0, 48)}\n              items={items.slice(0, 4)}\n              moves={moves.slice(0, 5)}\n              name={name}\n              rawCount={rawCount}\n              spreads={spreads.slice(0, 3)}\n              teammates={teammates.slice(0, 48)}\n              usage={usage}\n              sprite\n              onClickHandler={() => setSelectedPokémon(position)}\n            />\n          ),\n        )}\n      </ul>\n      <ul className=\"top-100-pokemon\">\n        {top100.map(\n          ({\n            position,\n            abilities,\n            checksAndCounters,\n            items,\n            moves,\n            name,\n            rawCount,\n            spreads,\n            teammates,\n            usage,\n          }) => (\n            <PokémonOverview\n              key={position}\n              position={position}\n              abilities={abilities}\n              checksAndCounters={checksAndCounters.slice(0, 18)}\n              items={items.slice(0, 4)}\n              moves={moves.slice(0, 5)}\n              name={name}\n              rawCount={rawCount}\n              spreads={spreads.slice(0, 3)}\n              teammates={teammates.slice(0, 18)}\n              usage={usage}\n              sprite={false}\n              onClickHandler={() => setSelectedPokémon(position)}\n            />\n          ),\n        )}\n      </ul>\n    </div>\n  );\n}\n/*\n\nconst dataExample = {\n  info: {\n    metagame: string,\n    cutoff: number,\n    'cutoff deviation': 0,\n    'team type': ID || null,\n    'number of battles': number,\n  },\n  data: {\n    pokemon: {\n      'Raw count': 'number',\n      usage: 'number',\n      'Viability Ceiling': '[number, number, number, number]', \n      // num GXE, max GXE, 1% GXE, 20% GXE\n      Abilities: '{ [ability: string]: number }',\n      Items: '{ [item: string]: number }',\n      Spreads: '{ [spread: string]: number }',\n      Happiness: '{ [happiness: string]: number }',\n      Moves: '{ [move: string]: number }',\n      Teammates: '{ [pokemon: string]: number }',\n      'Checks and Counters': '{ [pokemon: string]: [n, p, d] }',\n      // n = sum(POKE1_KOED...DOUBLE_SWITCH)\n      // p = POKE1_KOED + POKE1_SWITCHED_OUT / n\n      // d = sqrt((p * (1 - p)) / n)\n    },\n  },\n};\n*/\n\nexport default PokémonList;\n","import React from 'react';\nimport PokémonList from './PokémonList';\n\nfunction index() {\n  return <PokémonList />;\n}\n\nexport default index;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PokémonList from './components/PokémonList';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PokémonList />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}